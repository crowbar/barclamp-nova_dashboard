import os

from django.utils.translation import ugettext_lazy as _

DEBUG = False
TEMPLATE_DEBUG = DEBUG
PROD = False
USE_SSL = False

LOCAL_PATH = os.path.dirname(os.path.abspath(__file__))

DATABASES = {
    'default': {
        <% @db_settings.sort_by { |key, value| key }.each do |key,value| -%>
        '<%= key %>': <%= value %>,
        <% end -%>
    },
}

CACHE_BACKEND = 'dummy://'
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

# Send email to the console by default
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# Or send them to /dev/null
#EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'

# django-mailer uses a different settings attribute
MAILER_EMAIL_BACKEND = EMAIL_BACKEND

# Configure these for your outgoing email host
# EMAIL_HOST = 'smtp.my-company.com'
# EMAIL_PORT = 25
# EMAIL_HOST_USER = 'djangomail'
# EMAIL_HOST_PASSWORD = 'top-secret!'

HORIZON_CONFIG = {
    'dashboards': ('project', 'admin', 'settings',),
    'default_dashboard': 'project',
    'user_home': 'openstack_dashboard.views.get_user_home',
    'password_validator': {
        "regex": '.{8,}',
        "help_text": "Your password must be at least 8 characters long."
    },
    'ajax_queue_limit': 10,
    'auto_fade_alerts': {
        'delay': 3000,
        'fade_duration': 1500,
        'types': ['alert-success', 'alert-info']
    },
    'help_url': "http://docs.openstack.org",
}

COMPRESS_OFFLINE = <%= @compress_offline ? "True" : "False" %>

OPENSTACK_HOST = "<%= @keystone_address %>"
OPENSTACK_KEYSTONE_URL = "<%= @keystone_protocol %>://%s:<%= @keystone_service_port %>/v2.0" % OPENSTACK_HOST
OPENSTACK_KEYSTONE_DEFAULT_ROLE = "Member"
OPENSTACK_KEYSTONE_BACKEND = {
    'name': 'native',
    'can_edit_user': True
}

API_PAGINATE_LIMIT = 1000
SWIFT_PAGINATE_LIMIT = 1000

<% if (node.platform == "suse") or (node.platform == "ubuntu" and node[:nova_dashboard][:use_gitrepo]) -%>
from horizon.utils import secret_key
SECRET_KEY = secret_key.generate_or_read_from_file(os.path.join(LOCAL_PATH, '.secret_key_store'))
<% end -%>

# If you have external monitoring links
# EXTERNAL_MONITORING = [
#    ['Nagios','http://foo.com'],
#    ['Ganglia','http://bar.com'],
# ]

LOGGING = {
  'version': 1,
  # When set to True this will disable all logging except
  # for loggers specified in this configuration dictionary. Note that
  # if nothing is specified here and disable_existing_loggers is True,
  # django.db.backends will still log unless it is disabled explicitly.
  'disable_existing_loggers': False,
  'handlers': {
    'null': {
      'level': 'DEBUG',
      'class': 'django.utils.log.NullHandler',
    },
    'console': {
      # Set the level to "DEBUG" for verbose output logging.
      'level': 'INFO',
      'class': 'logging.StreamHandler',
    },
  },
  'loggers': {
    # Logging from django.db.backends is VERY verbose, send to null
    # by default.
    'django.db.backends': {
      'handlers': ['null'],
      'propagate': False,
    },
    'horizon': {
      'handlers': ['console'],
      'propagate': False,
    },
    'novaclient': {
      'handlers': ['console'],
      'propagate': False,
    },
    'keystoneclient': {
      'handlers': ['console'],
      'propagate': False,
    },
    'nose.plugins.manager': {
      'handlers': ['console'],
      'propagate': False,
    }
  }
}
