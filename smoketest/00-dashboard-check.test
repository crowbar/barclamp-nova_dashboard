#!/usr/bin/env python
#
# Copyright 2011-2013, Dell
# Copyright 2013-2014, SUSE LINUX Products GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
#
# TODO: Needs to be replaced by https://github.com/sstephenson/bats
#
#

import os
if os.path.isfile("/etc/redhat-release"):
  os.system("sudo yum --assumeyes install python-lxml")
elif os.path.isfile("/etc/SuSE-release"):
  os.system("sudo zypper -n install python-lxml")
else:
  os.system("sudo apt-get install -y python-lxml")

import urllib
import urllib2
import subprocess
import json
import re
from lxml import html


class TestDashboardBasicOps(object):
  @classmethod
  def __init__(self, user, passwd):
    self.user = user
    self.passwd = passwd
    cmd = "knife search node roles:nova_dashboard-server -F json -a nova_dashboard.apache.ssl"
    p = subprocess.Popen(cmd.split(" "), stdout=subprocess.PIPE)
    out = p.communicate()[0]
    err = p.returncode
    if err != 0:
      raise Exception("nova_dashboard-server not found")
    try:
      out = json.loads(out)
    except:
      raise Exception("Unable to parse knife output " + out)
    if out['results'] != 1:
      raise Exception("There is " + out['results'] + "dashboard servers found")
    if out['rows'][0]['nova_dashboard.apache.ssl']:
      proto = "https"
    else:
      proto = "http"
    self.url = proto+"://"+out['rows'][0]['id']


  def check_login_page(self):
    try:
      response = urllib2.urlopen(self.url + "/auth/login/")
      regexp = re.compile('.*<h3>Log In</h3>.*')
      index = response.read().split('\n')
      for line in index:
        if regexp.match(line):
          return True
      return False
    except:
      return False

  def user_login(self):
    try:
      self.opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())
      response = self.opener.open(self.url + "/auth/login/").read()
      # Grab the CSRF token and default region
      csrf_token = html.fromstring(response).xpath('//input[@name="csrfmiddlewaretoken"]/@value')[0]
      region = html.fromstring(response).xpath('//input[@name="region"]/@value')[0]
      req = urllib2.Request(self.url + "/auth/login/")
      req.add_header('Content-type', 'application/x-www-form-urlencoded')
      req.add_header('Referer', self.url + "/auth/login/")
      params = {'username': self.user, 'password': self.passwd, 'region': region, 'csrfmiddlewaretoken': csrf_token}
      regexp = re.compile('.*Overview.*')
      response = self.opener.open(req, urllib.urlencode(params))
      index = response.read()
      self.user_index = index
      for line in index.split('\n'):
        if regexp.match(line):
          return True
      return False
    except:
      return False

  def check_link(self, condition, tgt = None):
     for lnk in html.fromstring(self.user_index).xpath(condition):
       req = urllib2.Request(self.url + lnk)
       response = self.opener.open(req)
       if response.code != 200:
         return False
       if tgt != None:
         regexp = re.compile('.*' + tgt + '.*')
         index = response.read()
         for line in index.split('\n'):
           if regexp.match(line):
             return True
         return False
     return True

print "Performing admin tests"
admintest = TestDashboardBasicOps("admin", "crowbar")
print "Checking login page"
if not admintest.check_login_page():
  raise Exception("admintest.check_login_page failed")
print "Checking auth"
if not admintest.user_login():
  raise Exception("admintest.user_login failed")
print "Checking css"
if not admintest.check_link('//link[@rel="stylesheet"]/@href'):
  raise Exception("admin css test failed")
print "Checking js"
if not admintest.check_link('//script[@type="text/javascript"]/@src'):
  raise Exception("admin js test failed")

behavior_admin = {}
behavior_admin['Instances'] = "Instances - OpenStack Dashboard"
behavior_admin['Volumes'] = "Volumes - OpenStack Dashboard"
behavior_admin['Networks'] = "Networks - OpenStack Dashboard"
behavior_admin['Routers'] = "Routers - OpenStack Dashboard"
behavior_admin['Hypervisors'] = "Hypervisors - OpenStack Dashboard"
behavior_admin['Flavors'] = "Flavors - OpenStack Dashboard"
behavior_admin['Images'] = "Images - OpenStack Dashboard"
behavior_admin['Defaults'] = "Defaults - OpenStack Dashboard"
behavior_admin['System Info'] = "System Info - OpenStack Dashboard"
behavior_admin['Domains'] = "Domains - OpenStack Dashboard"
behavior_admin['Projects'] = "Projects - OpenStack Dashboard"
behavior_admin['Users'] = "Users - OpenStack Dashboard"
behavior_admin['Groups'] = "Groups - OpenStack Dashboard"
behavior_admin['Roles'] = "Roles - OpenStack Dashboard"
for key in behavior_admin.keys():
  print "Checking", key, "dashboard"
  if not admintest.check_link('//a[text()="' + key + '"]/@href', behavior_admin[key]):
    raise Exception("admin " + key + " dashboard test failed")



print "Performing user tests"
usertest = TestDashboardBasicOps("crowbar", "crowbar")

print "Checking login page"
if not usertest.check_login_page():
  raise Exception("usertest.check_login_page failed")
print "Checking auth"
if not usertest.user_login():
  raise Exception("usertest.user_login failed")
print "Checking css"
if not usertest.check_link('//link[@rel="stylesheet"]/@href'):
  raise Exception("user css test failed")
print "Checking js"
if not usertest.check_link('//script[@type="text/javascript"]/@src'):
  raise Exception("user js test failed")

behavior_user = {}
behavior_user['Overview'] = "Instance Overview - OpenStack Dashboard"
behavior_user['Access & Security'] = "Access.*Security - OpenStack Dashboard"
behavior_user['Images & Snapshots'] = "Images.*Snapshots - OpenStack Dashboard<"
behavior_user['Network Topology'] = "Network Topology - OpenStack Dashboard"
behavior_user['Instances'] = "Instances - OpenStack Dashboard"
behavior_user['Volumes'] = "Volumes - OpenStack Dashboard"
behavior_user['Networks'] = "Networks - OpenStack Dashboard"
behavior_user['Routers'] = "Routers - OpenStack Dashboard"

for key in behavior_user.keys():
  print "Checking", key, "dashboard"
  if not usertest.check_link('//a[text()="' + key + '"]/@href', behavior_user[key]):
    raise Exception("user " + key + " dashboard test failed")
